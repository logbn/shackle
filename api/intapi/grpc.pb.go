// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/intapi/grpc.proto

package intapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Node update request
type NodeUpdateRequest struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AddrIntApi           string            `protobuf:"bytes,2,opt,name=addrIntApi,proto3" json:"addrIntApi,omitempty"`
	Meta                 map[string]string `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VNodeCount           uint32            `protobuf:"varint,4,opt,name=vNodeCount,proto3" json:"vNodeCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeUpdateRequest) Reset()         { *m = NodeUpdateRequest{} }
func (m *NodeUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*NodeUpdateRequest) ProtoMessage()    {}
func (*NodeUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a5c5ebe6742920, []int{0}
}

func (m *NodeUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUpdateRequest.Unmarshal(m, b)
}
func (m *NodeUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUpdateRequest.Marshal(b, m, deterministic)
}
func (m *NodeUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUpdateRequest.Merge(m, src)
}
func (m *NodeUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_NodeUpdateRequest.Size(m)
}
func (m *NodeUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUpdateRequest proto.InternalMessageInfo

func (m *NodeUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeUpdateRequest) GetAddrIntApi() string {
	if m != nil {
		return m.AddrIntApi
	}
	return ""
}

func (m *NodeUpdateRequest) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NodeUpdateRequest) GetVNodeCount() uint32 {
	if m != nil {
		return m.VNodeCount
	}
	return 0
}

// Node update reply
type NodeUpdateReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeUpdateReply) Reset()         { *m = NodeUpdateReply{} }
func (m *NodeUpdateReply) String() string { return proto.CompactTextString(m) }
func (*NodeUpdateReply) ProtoMessage()    {}
func (*NodeUpdateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a5c5ebe6742920, []int{1}
}

func (m *NodeUpdateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUpdateReply.Unmarshal(m, b)
}
func (m *NodeUpdateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUpdateReply.Marshal(b, m, deterministic)
}
func (m *NodeUpdateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUpdateReply.Merge(m, src)
}
func (m *NodeUpdateReply) XXX_Size() int {
	return xxx_messageInfo_NodeUpdateReply.Size(m)
}
func (m *NodeUpdateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUpdateReply.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUpdateReply proto.InternalMessageInfo

func (m *NodeUpdateReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Node status update request
type NodeStatusUpdateRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStatusUpdateRequest) Reset()         { *m = NodeStatusUpdateRequest{} }
func (m *NodeStatusUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*NodeStatusUpdateRequest) ProtoMessage()    {}
func (*NodeStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a5c5ebe6742920, []int{2}
}

func (m *NodeStatusUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStatusUpdateRequest.Unmarshal(m, b)
}
func (m *NodeStatusUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStatusUpdateRequest.Marshal(b, m, deterministic)
}
func (m *NodeStatusUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatusUpdateRequest.Merge(m, src)
}
func (m *NodeStatusUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_NodeStatusUpdateRequest.Size(m)
}
func (m *NodeStatusUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatusUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatusUpdateRequest proto.InternalMessageInfo

func (m *NodeStatusUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeStatusUpdateRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Batch operation
type BatchOp struct {
	Op                   uint32   `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Items                []byte   `protobuf:"bytes,2,opt,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchOp) Reset()         { *m = BatchOp{} }
func (m *BatchOp) String() string { return proto.CompactTextString(m) }
func (*BatchOp) ProtoMessage()    {}
func (*BatchOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a5c5ebe6742920, []int{3}
}

func (m *BatchOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchOp.Unmarshal(m, b)
}
func (m *BatchOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchOp.Marshal(b, m, deterministic)
}
func (m *BatchOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOp.Merge(m, src)
}
func (m *BatchOp) XXX_Size() int {
	return xxx_messageInfo_BatchOp.Size(m)
}
func (m *BatchOp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOp proto.InternalMessageInfo

func (m *BatchOp) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *BatchOp) GetItems() []byte {
	if m != nil {
		return m.Items
	}
	return nil
}

// Batch Reploy
type BatchReply struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Res                  []byte   `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchReply) Reset()         { *m = BatchReply{} }
func (m *BatchReply) String() string { return proto.CompactTextString(m) }
func (*BatchReply) ProtoMessage()    {}
func (*BatchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a5c5ebe6742920, []int{4}
}

func (m *BatchReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchReply.Unmarshal(m, b)
}
func (m *BatchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchReply.Marshal(b, m, deterministic)
}
func (m *BatchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchReply.Merge(m, src)
}
func (m *BatchReply) XXX_Size() int {
	return xxx_messageInfo_BatchReply.Size(m)
}
func (m *BatchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchReply.DiscardUnknown(m)
}

var xxx_messageInfo_BatchReply proto.InternalMessageInfo

func (m *BatchReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *BatchReply) GetRes() []byte {
	if m != nil {
		return m.Res
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeUpdateRequest)(nil), "intapi.NodeUpdateRequest")
	proto.RegisterMapType((map[string]string)(nil), "intapi.NodeUpdateRequest.MetaEntry")
	proto.RegisterType((*NodeUpdateReply)(nil), "intapi.NodeUpdateReply")
	proto.RegisterType((*NodeStatusUpdateRequest)(nil), "intapi.NodeStatusUpdateRequest")
	proto.RegisterType((*BatchOp)(nil), "intapi.BatchOp")
	proto.RegisterType((*BatchReply)(nil), "intapi.BatchReply")
}

func init() {
	proto.RegisterFile("api/intapi/grpc.proto", fileDescriptor_33a5c5ebe6742920)
}

var fileDescriptor_33a5c5ebe6742920 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0xae, 0x93, 0x40,
	0x14, 0x15, 0x78, 0xf6, 0xbd, 0xde, 0xf7, 0x6a, 0xeb, 0x44, 0x2d, 0x76, 0xa1, 0x04, 0x37, 0x4d,
	0x4c, 0x40, 0x71, 0x51, 0xe3, 0xc6, 0xb4, 0xd5, 0x85, 0x0b, 0x6b, 0x82, 0x71, 0xe3, 0x6e, 0x84,
	0x9b, 0x32, 0x29, 0x65, 0xc6, 0x61, 0x68, 0xc2, 0xef, 0xf8, 0x4f, 0xfe, 0x8f, 0x19, 0x06, 0x2c,
	0x6a, 0x6d, 0xde, 0x8a, 0x7b, 0x0e, 0xf7, 0x9c, 0x39, 0xf7, 0x26, 0x17, 0x1e, 0x52, 0xc1, 0x42,
	0x56, 0x28, 0xfd, 0xd9, 0x4a, 0x91, 0x04, 0x42, 0x72, 0xc5, 0xc9, 0xc0, 0x50, 0xfe, 0x4f, 0x0b,
	0xee, 0x6f, 0x78, 0x8a, 0x5f, 0x44, 0x4a, 0x15, 0xc6, 0xf8, 0xbd, 0xc2, 0x52, 0x91, 0x7b, 0x60,
	0xb3, 0xd4, 0xb5, 0x3c, 0x6b, 0x3e, 0x8c, 0x6d, 0x96, 0x92, 0x27, 0x00, 0x34, 0x4d, 0xe5, 0x87,
	0x42, 0x2d, 0x05, 0x73, 0xed, 0x86, 0xef, 0x31, 0x64, 0x01, 0x17, 0x7b, 0x54, 0xd4, 0x75, 0x3c,
	0x67, 0x7e, 0x1d, 0x3d, 0x0b, 0x8c, 0x79, 0xf0, 0x8f, 0x71, 0xf0, 0x11, 0x15, 0x7d, 0x5f, 0x28,
	0x59, 0xc7, 0x8d, 0x40, 0x1b, 0x1f, 0x74, 0xd7, 0x9a, 0x57, 0x85, 0x72, 0x2f, 0x3c, 0x6b, 0x3e,
	0x8a, 0x7b, 0xcc, 0x6c, 0x01, 0xc3, 0xdf, 0x12, 0x32, 0x01, 0x67, 0x87, 0x75, 0x1b, 0x4b, 0x97,
	0xe4, 0x01, 0xdc, 0x3d, 0xd0, 0xbc, 0xc2, 0x36, 0x92, 0x01, 0x6f, 0xec, 0xd7, 0x96, 0xff, 0x1c,
	0xc6, 0xfd, 0xd7, 0x45, 0x5e, 0x13, 0x17, 0x2e, 0xcb, 0x2a, 0x49, 0xb0, 0x2c, 0x1b, 0x8b, 0xab,
	0xb8, 0x83, 0xfe, 0x12, 0xa6, 0xba, 0xf9, 0xb3, 0xa2, 0xaa, 0x2a, 0xcf, 0x6f, 0xe2, 0x11, 0x0c,
	0xca, 0xa6, 0xad, 0x7d, 0xb2, 0x45, 0x7e, 0x08, 0x97, 0x2b, 0xaa, 0x92, 0xec, 0x93, 0xd0, 0x12,
	0x2e, 0x1a, 0xc9, 0x28, 0xb6, 0xb9, 0xd0, 0x21, 0x99, 0xc2, 0xbd, 0x51, 0xdc, 0xc4, 0x06, 0xf8,
	0x2f, 0x00, 0x1a, 0x81, 0xc9, 0x36, 0x01, 0x07, 0xa5, 0xec, 0x46, 0x43, 0x29, 0x35, 0x23, 0xb1,
	0xd3, 0xe8, 0x32, 0xfa, 0x61, 0xc1, 0xcd, 0x9a, 0x73, 0x99, 0xb2, 0x82, 0x2a, 0xc6, 0x0b, 0xb2,
	0x02, 0x38, 0xce, 0x48, 0x1e, 0xff, 0x77, 0xeb, 0xb3, 0xe9, 0xa9, 0x5f, 0x22, 0xaf, 0xfd, 0x3b,
	0x64, 0x03, 0x93, 0xbf, 0x47, 0x27, 0x4f, 0xfb, 0xed, 0x27, 0x96, 0x72, 0xc6, 0x2f, 0x7a, 0x0b,
	0xf0, 0x0e, 0x73, 0xdc, 0x9a, 0x84, 0x2f, 0xe1, 0xaa, 0x45, 0x48, 0xc6, 0x9d, 0xa8, 0xdd, 0xd3,
	0x8c, 0xfc, 0x41, 0x74, 0x06, 0x4b, 0xb8, 0xd6, 0x25, 0x4b, 0x8c, 0x43, 0x04, 0xc3, 0x0e, 0xde,
	0xd6, 0x62, 0xe5, 0x7f, 0xf5, 0x32, 0xb6, 0xcd, 0x0e, 0x3c, 0xaf, 0xf6, 0x18, 0x30, 0x1e, 0x96,
	0x19, 0x4d, 0x76, 0x39, 0x86, 0xc7, 0x53, 0xf8, 0x36, 0x68, 0xce, 0xe0, 0xd5, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0x6a, 0xf9, 0xbe, 0x1f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoordinationClient is the client API for Coordination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordinationClient interface {
	// NodeUpdate is used during cluster initialization to ensure leader has correct follower grpc address
	NodeUpdate(ctx context.Context, in *NodeUpdateRequest, opts ...grpc.CallOption) (*NodeUpdateReply, error)
	// NodeStatusUpdate is used to update a node's status
	NodeStatusUpdate(ctx context.Context, in *NodeStatusUpdateRequest, opts ...grpc.CallOption) (*NodeUpdateReply, error)
}

type coordinationClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinationClient(cc grpc.ClientConnInterface) CoordinationClient {
	return &coordinationClient{cc}
}

func (c *coordinationClient) NodeUpdate(ctx context.Context, in *NodeUpdateRequest, opts ...grpc.CallOption) (*NodeUpdateReply, error) {
	out := new(NodeUpdateReply)
	err := c.cc.Invoke(ctx, "/intapi.Coordination/NodeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinationClient) NodeStatusUpdate(ctx context.Context, in *NodeStatusUpdateRequest, opts ...grpc.CallOption) (*NodeUpdateReply, error) {
	out := new(NodeUpdateReply)
	err := c.cc.Invoke(ctx, "/intapi.Coordination/NodeStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinationServer is the server API for Coordination service.
type CoordinationServer interface {
	// NodeUpdate is used during cluster initialization to ensure leader has correct follower grpc address
	NodeUpdate(context.Context, *NodeUpdateRequest) (*NodeUpdateReply, error)
	// NodeStatusUpdate is used to update a node's status
	NodeStatusUpdate(context.Context, *NodeStatusUpdateRequest) (*NodeUpdateReply, error)
}

// UnimplementedCoordinationServer can be embedded to have forward compatible implementations.
type UnimplementedCoordinationServer struct {
}

func (*UnimplementedCoordinationServer) NodeUpdate(ctx context.Context, req *NodeUpdateRequest) (*NodeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeUpdate not implemented")
}
func (*UnimplementedCoordinationServer) NodeStatusUpdate(ctx context.Context, req *NodeStatusUpdateRequest) (*NodeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeStatusUpdate not implemented")
}

func RegisterCoordinationServer(s *grpc.Server, srv CoordinationServer) {
	s.RegisterService(&_Coordination_serviceDesc, srv)
}

func _Coordination_NodeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServer).NodeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intapi.Coordination/NodeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServer).NodeUpdate(ctx, req.(*NodeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordination_NodeStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServer).NodeStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intapi.Coordination/NodeStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServer).NodeStatusUpdate(ctx, req.(*NodeStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordination_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intapi.Coordination",
	HandlerType: (*CoordinationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeUpdate",
			Handler:    _Coordination_NodeUpdate_Handler,
		},
		{
			MethodName: "NodeStatusUpdate",
			Handler:    _Coordination_NodeStatusUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/intapi/grpc.proto",
}

// DelegationClient is the client API for Delegation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DelegationClient interface {
	// Delegate executes a batch operation delegated by another node
	Delegate(ctx context.Context, in *BatchOp, opts ...grpc.CallOption) (*BatchReply, error)
}

type delegationClient struct {
	cc grpc.ClientConnInterface
}

func NewDelegationClient(cc grpc.ClientConnInterface) DelegationClient {
	return &delegationClient{cc}
}

func (c *delegationClient) Delegate(ctx context.Context, in *BatchOp, opts ...grpc.CallOption) (*BatchReply, error) {
	out := new(BatchReply)
	err := c.cc.Invoke(ctx, "/intapi.Delegation/Delegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelegationServer is the server API for Delegation service.
type DelegationServer interface {
	// Delegate executes a batch operation delegated by another node
	Delegate(context.Context, *BatchOp) (*BatchReply, error)
}

// UnimplementedDelegationServer can be embedded to have forward compatible implementations.
type UnimplementedDelegationServer struct {
}

func (*UnimplementedDelegationServer) Delegate(ctx context.Context, req *BatchOp) (*BatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}

func RegisterDelegationServer(s *grpc.Server, srv DelegationServer) {
	s.RegisterService(&_Delegation_serviceDesc, srv)
}

func _Delegation_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intapi.Delegation/Delegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationServer).Delegate(ctx, req.(*BatchOp))
	}
	return interceptor(ctx, in, info, handler)
}

var _Delegation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intapi.Delegation",
	HandlerType: (*DelegationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delegate",
			Handler:    _Delegation_Delegate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/intapi/grpc.proto",
}

// ReplicationClient is the client API for Replication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicationClient interface {
	// Replicate executes a batch operation replicated by another node
	Replicate(ctx context.Context, in *BatchOp, opts ...grpc.CallOption) (*BatchReply, error)
}

type replicationClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationClient(cc grpc.ClientConnInterface) ReplicationClient {
	return &replicationClient{cc}
}

func (c *replicationClient) Replicate(ctx context.Context, in *BatchOp, opts ...grpc.CallOption) (*BatchReply, error) {
	out := new(BatchReply)
	err := c.cc.Invoke(ctx, "/intapi.Replication/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServer is the server API for Replication service.
type ReplicationServer interface {
	// Replicate executes a batch operation replicated by another node
	Replicate(context.Context, *BatchOp) (*BatchReply, error)
}

// UnimplementedReplicationServer can be embedded to have forward compatible implementations.
type UnimplementedReplicationServer struct {
}

func (*UnimplementedReplicationServer) Replicate(ctx context.Context, req *BatchOp) (*BatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}

func RegisterReplicationServer(s *grpc.Server, srv ReplicationServer) {
	s.RegisterService(&_Replication_serviceDesc, srv)
}

func _Replication_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intapi.Replication/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Replicate(ctx, req.(*BatchOp))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intapi.Replication",
	HandlerType: (*ReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Replicate",
			Handler:    _Replication_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/intapi/grpc.proto",
}
